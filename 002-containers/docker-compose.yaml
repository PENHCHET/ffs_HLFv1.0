version: '2'

services:

  ##################################################################################
  ################################### zookeepers ###################################
  ##################################################################################
  zookeeper0:
    container_name: zookeeper0
    image: hyperledger/fabric-zookeeper
    restart: always
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
      - '2181'
      - '2888'
      - '3888'

  zookeeper1:
    container_name: zookeeper1
    image: hyperledger/fabric-zookeeper
    restart: always
    environment:
      - ZOO_MY_ID=2
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
      - '2181'
      - '2888'
      - '3888'

  zookeeper2:
    container_name: zookeeper2
    image: hyperledger/fabric-zookeeper
    restart: always
    environment:
      - ZOO_MY_ID=3
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
      - '2181'
      - '2888'
      - '3888'

  ##################################################################################
  ################################### kafka nodes ##################################
  ##################################################################################
  kafka0:
    container_name: kafka0
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_BROKER_ID=0
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    ports:
      - '9092'

  kafka1:
    container_name: kafka1
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_BROKER_ID=1
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    ports:
      - '9092'

  kafka2:
    container_name: kafka2
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_BROKER_ID=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    ports:
      - '9092'

  kafka3:
    container_name: kafka3
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_BROKER_ID=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    ports:
      - '9092'

  ##################################################################################
  ###################################  orderers   ##################################
  ##################################################################################
  orderer0.org1.foo.com:
    container_name: orderer0.org1.foo.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg1MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ../001-generateArtifacts/artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org1.foo.com/orderers/orderer0.org1.foo.com/msp:/var/hyperledger/orderer/msp
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org1.foo.com/orderers/orderer0.org1.foo.com/tls:/var/hyperledger/orderer/tls
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    ports:
      - 7050:7050

  orderer1.org1.foo.com:
    container_name: orderer1.org1.foo.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg1MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ../001-generateArtifacts/artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org1.foo.com/orderers/orderer1.org1.foo.com/msp:/var/hyperledger/orderer/msp
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org1.foo.com/orderers/orderer1.org1.foo.com/tls:/var/hyperledger/orderer/tls
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    ports:
      - 8050:7050


  orderer0.org2.foo.com:
    container_name: orderer0.org2.foo.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg2MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ../001-generateArtifacts/artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org2.foo.com/orderers/orderer0.org2.foo.com/msp:/var/hyperledger/orderer/msp
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org2.foo.com/orderers/orderer0.org2.foo.com/tls:/var/hyperledger/orderer/tls
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    ports:
      - 9050:7050

  orderer1.org2.foo.com:
    container_name: orderer1.org2.foo.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg2MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ../001-generateArtifacts/artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org2.foo.com/orderers/orderer1.org2.foo.com/msp:/var/hyperledger/orderer/msp
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org2.foo.com/orderers/orderer1.org2.foo.com/tls:/var/hyperledger/orderer/tls
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    ports:
      - 10050:7050


  orderer0.org3.foo.com:
    container_name: orderer0.org3.foo.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg3MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ../001-generateArtifacts/artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org3.foo.com/orderers/orderer0.org3.foo.com/msp:/var/hyperledger/orderer/msp
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org3.foo.com/orderers/orderer0.org3.foo.com/tls:/var/hyperledger/orderer/tls
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    ports:
      - 11050:7050

  orderer1.org3.foo.com:
    container_name: orderer1.org3.foo.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg2MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ../001-generateArtifacts/artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org3.foo.com/orderers/orderer1.org3.foo.com/msp:/var/hyperledger/orderer/msp
      - ../001-generateArtifacts/crypto-config/ordererOrganizations/org3.foo.com/orderers/orderer1.org3.foo.com/tls:/var/hyperledger/orderer/tls
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    ports:
      - 12050:7050


  ##################################################################################
  ###################################    peers    ##################################
  ##################################################################################
  peer0.org1.foo.com:
    container_name: peer0.org1.foo.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ffsnet_default
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer0.org1.foo.com
      - CORE_PEER_ADDRESS=peer0.org1.foo.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.foo.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.foo.com:7051
      - CORE_PEER_LOCALMSPID=PeerOrg1MSP
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org1.foo.com/peers/peer0.org1.foo.com/msp:/etc/hyperledger/fabric/msp
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org1.foo.com/peers/peer0.org1.foo.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 7051:7051
      - 7052:7052
      - 7053:7053

  peer1.org1.foo.com:
    container_name: peer1.org1.foo.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ffsnet_default
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer1.org1.foo.com
      - CORE_PEER_ADDRESS=peer1.org1.foo.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.foo.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.foo.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.foo.com:7051
      - CORE_PEER_LOCALMSPID=PeerOrg1MSP
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org1.foo.com/peers/peer1.org1.foo.com/msp:/etc/hyperledger/fabric/msp
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org1.foo.com/peers/peer1.org1.foo.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 8051:7051
      - 8052:7052
      - 8053:7053


  peer0.org2.foo.com:
    container_name: peer0.org2.foo.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ffsnet_default
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer0.org2.foo.com
      - CORE_PEER_ADDRESS=peer0.org2.foo.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org2.foo.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.foo.com:7051
      - CORE_PEER_LOCALMSPID=PeerOrg2MSP
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org2.foo.com/peers/peer0.org2.foo.com/msp:/etc/hyperledger/fabric/msp
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org2.foo.com/peers/peer0.org2.foo.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 9051:7051
      - 9052:7052
      - 9053:7053


  peer1.org2.foo.com:
    container_name: peer1.org2.foo.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ffsnet_default
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer1.org2.foo.com
      - CORE_PEER_ADDRESS=peer1.org2.foo.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org2.foo.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.foo.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.foo.com:7051
      - CORE_PEER_LOCALMSPID=PeerOrg2MSP
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org2.foo.com/peers/peer1.org2.foo.com/msp:/etc/hyperledger/fabric/msp
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org2.foo.com/peers/peer1.org2.foo.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 10051:7051
      - 10052:7052
      - 10053:7053


  peer0.org3.foo.com:
    container_name: peer0.org3.foo.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ffsnet_default
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer0.org3.foo.com
      - CORE_PEER_ADDRESS=peer0.org3.foo.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org3.foo.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org3.foo.com:7051
      - CORE_PEER_LOCALMSPID=PeerOrg3MSP
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org3.foo.com/peers/peer0.org3.foo.com/msp:/etc/hyperledger/fabric/msp
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org3.foo.com/peers/peer0.org3.foo.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 11051:7051
      - 11052:7052
      - 11053:7053


  peer1.org3.foo.com:
    container_name: peer1.org3.foo.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ffsnet_default
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer1.org3.foo.com
      - CORE_PEER_ADDRESS=peer1.org3.foo.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org3.foo.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org3.foo.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org3.foo.com:7051
      - CORE_PEER_LOCALMSPID=PeerOrg3MSP
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
        - /var/run/:/host/var/run/
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org3.foo.com/peers/peer1.org3.foo.com/msp:/etc/hyperledger/fabric/msp
        - ../001-generateArtifacts/crypto-config/peerOrganizations/org3.foo.com/peers/peer1.org3.foo.com/tls:/etc/hyperledger/fabric/tls
    ports:
      - 12051:7051
      - 12052:7052
      - 12053:7053



  cli:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    # command: /bin/bash -c 'tail -f /dev/null' 
    volumes:
        - /var/run/:/host/var/run/
        - ../000-makebins/source/fabric/examples/chaincode/go:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
        - ../001-generateArtifacts/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        # - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ../001-generateArtifacts/artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer0.org1.foo.com
      - orderer1.org1.foo.com
      - orderer0.org2.foo.com
      - orderer1.org2.foo.com
      - orderer0.org3.foo.com
      - orderer1.org3.foo.com
      - peer0.org1.foo.com
      - peer1.org1.foo.com
      - peer0.org2.foo.com
      - peer1.org2.foo.com
      - peer0.org3.foo.com
      - peer1.org3.foo.com
